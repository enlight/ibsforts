import * as ts from 'typescript';
export interface ILogger {
    log(message: string, time: Date): void;
    warn(message: string, time: Date): void;
    error(error: Error, time: Date): void;
}
export declare type OnWatchedFileChanged = (filePath: string) => Promise<void>;
export declare type PostCompileTransform = (files: ts.OutputFile[]) => Promise<ts.OutputFile[]>;
/**
 *
 */
export interface IProject {
    /** Absolute path to the project file. */
    projectFilePath: string;
    /** Paths to source files (usually relative). */
    rootFilePaths: string[];
    /** TypeScript compiler options. */
    compilerOptions: ts.CompilerOptions;
    /**
     * Transforms to apply to the output generated by TypeScript before it's written to disk.
     *
     * Each transform function should accept an array of files and return an array of transformed
     * files. Transforms are applied in the order they appear in the array, the input to the first
     * transform is the output from the TypeScript compiler, the input for each subsequent transform
     * is the output of the previous transform. The length of the array returned by a transform
     * function need not match the length of the array passed in, a zero length array can also be
     * returned to indicate no files should be written to disk.
     */
    postCompileTransforms: PostCompileTransform[];
}
/**
 * Watches one or more TypeScript projects for changes and incrementally rebuilds any source files
 * that change. Also applies optional transformations to the generated code before it's written out
 * to disk.
 */
export declare class IncrementalBuildServer {
    private documentRegistry;
    private services;
    private watcher;
    private logger;
    /**
     * @param logger Logger instance that should be used to log any messages, warnings, and errors.
     */
    constructor(logger: ILogger);
    watchProject(project: IProject): Promise<void>;
    unwatchProject(project: IProject): void;
}
/**
 * Builds TypeScript projects and applies optional transformations to the generated code before
 * it's written out to disk.
 */
export declare class BuildServer {
    private logger;
    /**
     * @param logger Logger instance that should be used to log any messages, warnings, and errors.
     */
    constructor(logger: ILogger);
    /**
     * @return A promise that will be resolved with either be resolved with `true` if the build
     *         succeeds, or `false` if the build fails.
     */
    build(project: IProject): Promise<boolean>;
}
/**
 * Locates and loads TypeScript project configuration files.
 */
export declare class ProjectLoader {
    /**
     * @return A promise that will either be resolved with a project configuration,
     *         or rejected with an error.
     */
    static loadFromConfigFile(filePath: string): Promise<IProject>;
    /**
     * Attempt to locate `tsconfig.json` in the given directory or one of its parent directories,
     * and load the project configuration from that file.
     *
     * @param dirPath Path to the directory in which the search should start.
     * @return A promise that will either be resolved with the project configuration loaded from disk,
     *         or rejected if no `tsconfig.json` could be located or loading failed.
     */
    static loadFromDir(dirPath: string): Promise<IProject>;
    /**
     * Attempt to locate `tsconfig.json` in the given directory or one of its parent directories.
     *
     * @param searchPath Path to the directory in which the search should start.
     * @return A promise that will either be resolved with a path to a `tsconfig.json`,
     *         or rejected if no such file could be located.
     */
    static findConfigFile(searchPath: string): Promise<string>;
}
